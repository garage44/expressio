---
description: "Backend development rules for Expressio - Bun server, CLI tools, and translation services"
globs:
  - "packages/expressio/api/**"
  - "packages/expressio/lib/**"
  - "packages/expressio/service.ts"
  - "packages/bunchy/**"
  - "packages/enola/**"
  - "packages/common/lib/**"
alwaysApply: false
---

# Expressio Backend Development Rules

Backend development guidelines for the Expressio AI-powered i18n tooling project.

## Tech Stack

- **Runtime**: Bun (modern JavaScript runtime)
- **Server**: Bun.serve() with custom routing - NOT Express.js
- **Architecture**: Service-oriented with dependency injection
- **CLI**: yargs-based command interface
- **Logging**: Custom isomorphic logger service
- **Config**: RC file-based configuration management

## Project Structure (Backend Focus)

```
packages/
├── expressio/
│   ├── api/           # REST API endpoints
│   ├── lib/           # Core business logic
│   └── service.ts     # CLI entry point
├── bunchy/            # Development tooling
├── common/lib/        # Shared backend utilities
└── enola/             # Translation service wrapper
```

## Bun Server Patterns

### Custom Server Implementation

**Route Organization:**
```ts
// Using Bun.serve() not Express.js
import { logger } from '@garage44/common/lib/logger';

export default {
  port: 3030,
  fetch(request: Request): Response | Promise<Response> {
    const url = new URL(request.url);

    try {
      // Route to appropriate handler
      if (url.pathname.startsWith('/api/workspaces')) {
        return handleWorkspaces(request);
      }

      if (url.pathname.startsWith('/api/translations')) {
        return handleTranslations(request);
      }

      return new Response('Not Found', { status: 404 });
    } catch (error) {
      logger.error('Request failed', { error, url: url.pathname });
      return new Response('Internal Server Error', { status: 500 });
    }
  },

  websocket: {
    message(ws, message) {
      // Handle WebSocket messages
      const data = JSON.parse(message);
      handleWebSocketMessage(ws, data);
    },
    open(ws) {
      logger.info('WebSocket client connected');
    },
    close(ws) {
      logger.info('WebSocket client disconnected');
    }
  }
};
```

**API Handler Patterns:**
```ts
// api/workspaces.ts
export const handleWorkspaces = async (request: Request): Promise<Response> => {
  const method = request.method;
  const url = new URL(request.url);

  try {
    switch (method) {
      case 'GET':
        const workspaces = await workspaceService.list();
        return Response.json(workspaces);

      case 'POST':
        const body = await request.json();
        const newWorkspace = await workspaceService.create(body);
        return Response.json(newWorkspace, { status: 201 });

      default:
        return new Response('Method Not Allowed', { status: 405 });
    }
  } catch (error) {
    logger.error('Workspace API error', { error, method, url: url.pathname });
    return Response.json({ error: 'Failed to process request' }, { status: 500 });
  }
};
```

### WebSocket Server with Bun

**Real-time Communication:**
```ts
// Custom WebSocket handling with Bun
const clients = new Set<ServerWebSocket>();

export const wsHandler = {
  message(ws: ServerWebSocket, message: string | Buffer) {
    try {
      const data = JSON.parse(message.toString());

      switch (data.type) {
        case 'translation.subscribe':
          ws.subscribe(`workspace:${data.workspaceId}`);
          break;

        case 'translation.request':
          handleTranslationRequest(ws, data);
          break;
      }
    } catch (error) {
      logger.error('WebSocket message error', { error });
      ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));
    }
  },

  open(ws: ServerWebSocket) {
    clients.add(ws);
    logger.info('WebSocket client connected', { clientCount: clients.size });
  },

  close(ws: ServerWebSocket) {
    clients.delete(ws);
    logger.info('WebSocket client disconnected', { clientCount: clients.size });
  }
};

// Broadcast to all subscribers
export const broadcastTranslationUpdate = (workspaceId: string, data: any) => {
  const message = JSON.stringify({
    type: 'translation.updated',
    workspaceId,
    data
  });

  clients.forEach(ws => {
    if (ws.isSubscribed(`workspace:${workspaceId}`)) {
      ws.send(message);
    }
  });
};
```

## Service Architecture

### Dependency Injection Patterns

**Service Definition:**
```ts
export interface TranslationService {
  translate(params: TranslationParams): Promise<TranslationResult>;
  validate(workspace: Workspace): Promise<ValidationResult>;
}

export class DefaultTranslationService implements TranslationService {
  constructor(
    private readonly enolaClient: EnolaClient,
    private readonly logger: Logger
  ) {}

  async translate(params: TranslationParams): Promise<TranslationResult> {
    this.logger.info('Starting translation', {
      workspaceId: params.workspaceId,
      targetLang: params.targetLanguage
    });

    try {
      const result = await this.enolaClient.translate(params);

      // Broadcast real-time update
      broadcastTranslationUpdate(params.workspaceId, {
        translationId: result.id,
        status: 'completed'
      });

      return result;
    } catch (error) {
      this.logger.error('Translation failed', { error, params });
      throw new TranslationError('Translation processing failed', { cause: error });
    }
  }
}
```

**Service Registration:**
```ts
// lib/service.ts
export const createServices = (config: Config) => {
  const logger = createLogger(config);
  const enolaClient = new EnolaClient(config.enola);

  return {
    translation: new DefaultTranslationService(enolaClient, logger),
    workspace: new WorkspaceService(logger),
    sync: new SyncService(logger),
    server: new ServerService(logger)
  };
};
```

## CLI Development

### yargs Command Structure

**Command Definition:**
```ts
// service.ts - CLI entry point
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import pc from 'picocolors';
import figlet from 'figlet';

const cli = yargs(hideBin(process.argv))
  .command(
    'start [port]',
    'Start the Expressio development server',
    (yargs) => {
      return yargs
        .positional('port', {
          describe: 'Port to run the server on',
          type: 'number',
          default: 3030
        })
        .option('host', {
          describe: 'Host to bind the server to',
          type: 'string',
          default: 'localhost'
        });
    },
    async (argv) => {
      console.log(pc.cyan(figlet.textSync('Expressio')));
      await startServerCommand(argv);
    }
  )
  .command(
    'translate <workspace>',
    'Translate workspace using AI',
    (yargs) => {
      return yargs
        .positional('workspace', {
          describe: 'Path to workspace directory',
          type: 'string',
          demandOption: true
        })
        .option('target-lang', {
          alias: 't',
          describe: 'Target language code (e.g., es, fr, de)',
          type: 'string',
          demandOption: true
        })
        .option('provider', {
          alias: 'p',
          describe: 'Translation provider',
          choices: ['deepl', 'anthropic'],
          default: 'deepl'
        });
    },
    async (argv) => {
      try {
        await translateCommand(argv);
      } catch (error) {
        logger.error('Translation command failed', { error });
        console.error(pc.red('✗ Translation failed'));
        process.exit(1);
      }
    }
  )
  .demandCommand()
  .help()
  .version();

export default cli;
```

**Command Implementation:**
```ts
export const startServerCommand = async (argv: StartCommandArgs) => {
  const { port, host } = argv;

  console.log(pc.green(`🚀 Starting Expressio server on ${host}:${port}`));

  const config = await loadConfig();
  const services = createServices(config);

  // Start Bun server
  const server = Bun.serve({
    port,
    hostname: host,
    fetch: createFetchHandler(services),
    websocket: wsHandler
  });

  console.log(pc.green(`✅ Server running at http://${host}:${port}`));
  console.log(pc.blue(`📡 WebSocket available at ws://${host}:${port}/ws`));
};

export const translateCommand = async (argv: TranslateCommandArgs) => {
  const { workspace, targetLang, provider } = argv;

  console.log(pc.cyan('🔄 Loading workspace...'));

  const services = createServices(await loadConfig());
  const workspaceData = await services.workspace.load(workspace);

  console.log(pc.green(`✅ Loaded workspace: ${workspaceData.name}`));
  console.log(pc.blue(`🎯 Target language: ${targetLang}`));
  console.log(pc.blue(`🤖 Provider: ${provider}`));

  const result = await services.translation.translate({
    workspaceId: workspaceData.id,
    targetLanguage: targetLang,
    provider
  });

  console.log(pc.green(`✅ Translated ${result.translations.length} items`));
};
```

### CLI UX Patterns

**Colored Output:**
```ts
import pc from 'picocolors';

// Success states
console.log(pc.green('✅ Translation completed successfully'));

// Warnings
console.log(pc.yellow('⚠️  Some translations may need review'));

// Errors
console.log(pc.red('❌ Translation failed'));

// Info
console.log(pc.blue('ℹ️  Processing workspace...'));

// Progress
console.log(pc.cyan('🔄 Translating batch 1/5...'));
```

**Progress Indication:**
```ts
// Simple progress for CLI
const logProgress = (current: number, total: number, item: string) => {
  const percentage = Math.round((current / total) * 100);
  const progressBar = '█'.repeat(Math.floor(percentage / 5)) + '░'.repeat(20 - Math.floor(percentage / 5));

  console.log(pc.cyan(`[${progressBar}] ${percentage}% | ${current}/${total} | ${item}`));
};

// Usage in translation loop
for (let i = 0; i < translations.length; i++) {
  const translation = translations[i];
  logProgress(i + 1, translations.length, translation.key);
  await processTranslation(translation);
}
```

## Configuration Management

### RC File Patterns

**Configuration Loading:**
```ts
// lib/config.ts
import { cosmiconfigSync } from 'cosmiconfig';
import { z } from 'zod';

const ConfigSchema = z.object({
  server: z.object({
    port: z.number().default(3030),
    host: z.string().default('localhost')
  }),
  translation: z.object({
    provider: z.enum(['deepl', 'anthropic']).default('deepl'),
    apiKey: z.string(),
    maxConcurrency: z.number().default(5)
  }),
  logging: z.object({
    level: z.enum(['debug', 'info', 'warn', 'error']).default('info')
  })
});

export type Config = z.infer<typeof ConfigSchema>;

export const loadConfig = (): Config => {
  const explorer = cosmiconfigSync('expressio');
  const result = explorer.search();

  if (!result) {
    throw new Error('No configuration found. Create .expressiorc.json or add expressio config to package.json');
  }

  try {
    return ConfigSchema.parse(result.config);
  } catch (error) {
    throw new Error(`Invalid configuration: ${error.message}`);
  }
};
```

**Environment Overrides:**
```ts
export const createConfig = (): Config => {
  const baseConfig = loadConfig();

  // Allow environment variable overrides
  return {
    ...baseConfig,
    server: {
      ...baseConfig.server,
      port: Number(process.env.EXPRESSIO_PORT) || baseConfig.server.port,
      host: process.env.EXPRESSIO_HOST || baseConfig.server.host
    },
    translation: {
      ...baseConfig.translation,
      apiKey: process.env.EXPRESSIO_API_KEY || baseConfig.translation.apiKey
    },
    logging: {
      ...baseConfig.logging,
      level: (process.env.LOG_LEVEL as any) || baseConfig.logging.level
    }
  };
};
```

## File Operations & Security

### Safe File Handling

**Path Validation:**
```ts
import path from 'node:path';
import { access, constants } from 'node:fs/promises';

export const validateWorkspacePath = async (workspacePath: string): Promise<string> => {
  // Resolve and normalize path
  const normalizedPath = path.resolve(workspacePath);

  // Security: Prevent path traversal
  if (!normalizedPath.startsWith(process.cwd())) {
    throw new SecurityError('Workspace path must be within project directory');
  }

  // Check if directory exists and is accessible
  try {
    await access(normalizedPath, constants.R_OK | constants.W_OK);
  } catch {
    throw new FileSystemError(`Cannot access workspace at ${normalizedPath}`);
  }

  return normalizedPath;
};

export const readWorkspace = async (workspacePath: string): Promise<Workspace> => {
  const validatedPath = await validateWorkspacePath(workspacePath);
  const configPath = path.join(validatedPath, '.expressio.json');

  try {
    const configFile = Bun.file(configPath);
    const exists = await configFile.exists();

    if (!exists) {
      throw new WorkspaceError(`No workspace configuration found at ${configPath}`);
    }

    const content = await configFile.text();
    return JSON.parse(content);
  } catch (error) {
    if (error instanceof WorkspaceError) throw error;
    throw new WorkspaceError(`Failed to read workspace: ${error.message}`);
  }
};
```

**Input Sanitization:**
```ts
export const sanitizeTranslationKey = (key: string): string => {
  // Remove dangerous characters and normalize
  return key
    .replace(/[^\w.-]/g, '_')
    .toLowerCase()
    .replace(/_{2,}/g, '_')
    .replace(/^_+|_+$/g, '');
};

export const validateLanguageCode = (code: string): boolean => {
  // ISO 639-1 with optional region (e.g., en, en-US)
  return /^[a-z]{2}(-[A-Z]{2})?$/.test(code);
};

export const sanitizeFilePath = (filePath: string): string => {
  // Remove dangerous path components
  return path.normalize(filePath).replace(/\.\./g, '');
};
```

## Translation Engine Integration

### Enola Service Patterns

**Provider Abstraction:**
```ts
// enola/index.ts
export interface TranslationProvider {
  translate(request: TranslationRequest): Promise<TranslationResponse>;
  getSupportedLanguages(): Promise<Language[]>;
  validateApiKey(): Promise<boolean>;
  getUsageStats(): Promise<UsageStats>;
}

export class EnolaClient {
  constructor(private providers: Record<string, TranslationProvider>) {}

  async translate(request: TranslationRequest): Promise<TranslationResponse> {
    const provider = this.providers[request.provider];
    if (!provider) {
      throw new Error(`Unknown translation provider: ${request.provider}`);
    }

    // Validate API key before translation
    const isValidKey = await provider.validateApiKey();
    if (!isValidKey) {
      throw new Error(`Invalid API key for provider: ${request.provider}`);
    }

    return provider.translate(request);
  }
}
```

**Error Handling & Retries:**
```ts
export const translateWithRetry = async (
  request: TranslationRequest,
  maxRetries = 3,
  baseDelay = 1000
): Promise<TranslationResponse> => {
  let lastError: Error;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const startTime = performance.now();
      const result = await enolaClient.translate(request);
      const duration = performance.now() - startTime;

      logger.info('Translation successful', {
        provider: request.provider,
        attempt,
        duration: `${duration.toFixed(2)}ms`,
        textLength: request.text.length
      });

      return result;
    } catch (error) {
      lastError = error;

      // Don't retry on client errors (4xx)
      if (error.status >= 400 && error.status < 500) {
        throw error;
      }

      if (attempt === maxRetries) break;

      // Exponential backoff with jitter
      const delay = baseDelay * Math.pow(2, attempt - 1) + Math.random() * 1000;

      logger.warn(`Translation attempt ${attempt} failed, retrying in ${delay}ms`, {
        error: error.message,
        attempt,
        maxRetries,
        nextDelay: delay
      });

      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  throw new TranslationError(`Translation failed after ${maxRetries} attempts`, {
    cause: lastError,
    provider: request.provider,
    maxRetries
  });
};
```

## Logging & Monitoring

### Structured Logging

**Context-Rich Logging:**
```ts
import { logger } from '@garage44/common/lib/logger';

// Always include relevant context
logger.info('Processing translation batch', {
  operation: 'translate_batch',
  workspaceId,
  batchSize: translations.length,
  targetLanguage,
  provider: 'deepl',
  userId: session.userId
});

// Performance monitoring
const timer = logger.startTimer();
try {
  const result = await expensiveOperation();
  timer.done('Operation completed successfully');
  return result;
} catch (error) {
  timer.done('Operation failed');

  logger.error('Operation failed', {
    operation: 'translate_batch',
    error: {
      message: error.message,
      stack: error.stack,
      code: error.code
    },
    context: { workspaceId, targetLanguage }
  });

  throw error;
}
```

## Performance & Monitoring

**Memory Management:**
```ts
// Monitor memory usage for large translation batches
const checkMemoryUsage = () => {
  const usage = process.memoryUsage();

  if (usage.heapUsed > 500 * 1024 * 1024) { // 500MB
    logger.warn('High memory usage detected', {
      heapUsed: `${(usage.heapUsed / 1024 / 1024).toFixed(2)}MB`,
      heapTotal: `${(usage.heapTotal / 1024 / 1024).toFixed(2)}MB`,
      external: `${(usage.external / 1024 / 1024).toFixed(2)}MB`
    });
  }
};

// Rate limiting for external APIs
const rateLimiter = new Map<string, number[]>();

const checkRateLimit = (provider: string, maxRequests = 10, windowMs = 60000) => {
  const now = Date.now();
  const requests = rateLimiter.get(provider) || [];

  // Remove old requests outside the window
  const validRequests = requests.filter(time => now - time < windowMs);

  if (validRequests.length >= maxRequests) {
    throw new RateLimitError(`Rate limit exceeded for ${provider}`);
  }

  validRequests.push(now);
  rateLimiter.set(provider, validRequests);
};
```

## Common Anti-patterns

❌ **Don't do:**
- Use Express.js patterns - this is Bun with custom routing
- Block the main thread with synchronous file operations
- Store sensitive API keys in workspace files
- Skip input validation on user-provided paths
- Ignore WebSocket connection cleanup

✅ **Do:**
- Use Bun.serve() and native Web APIs (Request/Response)
- Leverage Bun's fast file I/O with async operations
- Use environment variables for sensitive configuration
- Validate and sanitize all file paths and user inputs
- Implement proper WebSocket lifecycle management
- Use structured logging with relevant context
