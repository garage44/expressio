# Expressio - AI-powered i18n Tooling Project

You are an AI assistant helping with the Expressio project, an AI-powered internationalization (i18n) tooling application that combines AI translation with workflow automation.

## Project Overview

Expressio is a monorepo with multiple packages that provides:
- AI-powered translation services using providers like DeepL and Anthropic Claude
- Automated i18n workflow synchronization
- Web-based translation management interface
- CLI tools for import/export and linting
- WebSocket-based real-time updates

## Architecture & Tech Stack

- **Runtime**: Bun (modern JavaScript runtime)
- **Language**: TypeScript with ES2023 target
- **Frontend**: Preact with JSX, SCSS for styling
- **Backend**: Express.js server with WebSocket support
- **Monorepo**: Workspace-based with packages: expressio, bunchy, common, enola
- **Package Manager**: Bun with workspace dependencies
- **Linting**: oxlint for TypeScript, stylelint for SCSS
- **License**: AGPL for main package, MIT for utilities

## Project Structure

```
packages/
├── expressio/       # Main application (AGPL)
│   ├── src/         # Frontend Preact components
│   ├── api/         # Backend API routes
│   ├── lib/         # Core business logic
│   ├── public/      # Static assets
│   └── service.ts   # Main CLI entry point
├── bunchy/          # Development tooling (MIT)
├── common/          # Shared utilities (MIT)
└── enola/           # Translation service wrapper (MIT)
```

## Coding Standards & Conventions

### TypeScript
- Use ES modules (`type: "module"` in package.json)
- Import with `.ts` extensions when needed
- Path aliases: `@/*` for src, `@garage44/common/*` for common package
- Strict TypeScript configuration with bundler module resolution
- Target ES2023 with DOM libraries

### Frontend (Preact)
- Use Preact with JSX (`jsx: "react-jsx"`, `jsxImportSource: "preact"`)
- Component structure: elements/, pages/, main/
- State management through custom store system, instead of useState
- WebSocket client for real-time communication
- SCSS for styling with organized directory structure; do NOT use inline styles

### Backend (Express)
- RESTful API design in api/ directory
- WebSocket server for real-time features
- Service-oriented architecture with dependency injection
- Logging through custom logger service
- Configuration management with RC files

### CLI Design
- Use yargs for command parsing
- Commands: start, import, export, lint
- Consistent option naming (--workspace, --input, --output)
- Colored output using picocolors
- Figlet banner for branding

## Development Workflow

### Commands
- `bun run dev` - Start development server with watch mode
- `bun run build` - Production build
- `bun run lint:ts` - TypeScript linting with oxlint
- `bun run lint:scss` - SCSS linting with stylelint

### File Naming
- Use kebab-case for directories and files
- TypeScript files end in `.ts` or `.tsx`
- Components in logical groupings (elements, pages, main)
- API routes match functionality (workspaces.ts, profile.ts, etc.)

## Key Features to Understand

### Translation Workflow
- Source language extraction from code
- AI-powered translation via Enola service
- Target language generation and synchronization
- Import/export from/to i18next format
- Linting for missing or unused translations

### WebSocket Communication
- Real-time updates between frontend and backend
- Client connects to `ws://hostname:3030/ws`
- Used for live translation updates and workspace sync

### Workspace Management
- `.expressio.json` files contain translation data
- Workspace loading/saving with validation
- Multi-language support (source + target languages)
- Integration with project source code scanning

## Code Style Preferences

1. **Import Organization**: Group by external deps, internal packages, relative imports
2. **Error Handling**: Use proper logging with context, graceful degradation
3. **Type Safety**: Leverage TypeScript fully, avoid `any` types
4. **Component Props**: Use interfaces for component props, destructure cleanly
5. **Async/Await**: Prefer over Promises for readability
6. **Path Handling**: Use Node.js path utilities, handle cross-platform concerns
7. **Configuration**: Externalize config, support environment overrides

## Security & Licensing

- Main expressio package is AGPL - consider implications for contributions
- Utility packages (bunchy, common, enola) are MIT licensed
- Handle user authentication (basic admin/admin for now)
- Validate file paths and user inputs carefully
- Secure WebSocket connections appropriately

## Development Notes

- Uses Bun's built-in development server and bundler
- Hot reload enabled in development mode
- Frontend bundles are generated automatically
- Workspace files are JSON-based configuration
- CLI is designed for both interactive and CI/CD usage

When working on this codebase:
1. Respect the monorepo structure and package boundaries
2. Follow existing patterns for state management and component structure
3. Maintain backward compatibility for workspace file formats
4. Consider performance implications of real-time translation features
5. Test CLI commands thoroughly as they modify user files
6. Keep security in mind when handling file operations and external API calls

## AI Authoring Efficiency Guidelines

### Context-Aware Assistance
- Always consider the current package context (expressio/bunchy/common/enola)
- Reference existing patterns from similar files before suggesting new approaches
- Understand the translation workflow when making suggestions about i18n features
- Consider WebSocket implications for real-time features

### Code Generation Preferences
- Generate complete, runnable code that follows project patterns
- Include necessary imports and type definitions
- Follow the established error handling and logging patterns
- Consider both CLI and web interface implications for new features

### Documentation & Architecture
- Generate JSDoc comments for complex functions, especially in lib/ directories
- Suggest inline comments for non-obvious business logic related to translation workflows
- When adding new features, consider impact on .expressio.json workspace format
- Reference existing API patterns when suggesting new endpoints

### Testing & Quality
- Suggest test cases for CLI commands that modify files
- Consider edge cases in translation workflows (empty strings, special characters, etc.)
- Validate against existing linting rules (oxlint/stylelint)
- Think about performance implications for large translation sets

### Monorepo Awareness
- Understand workspace dependencies and avoid circular references
- Suggest appropriate package for new utilities (common vs expressio-specific)
- Consider licensing implications when suggesting external dependencies
- Respect package boundaries and public/private API contracts